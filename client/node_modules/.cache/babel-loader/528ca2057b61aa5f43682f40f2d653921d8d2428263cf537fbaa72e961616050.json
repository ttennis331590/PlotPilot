{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\repos\\\\PlotPilot\\\\client\\\\src\\\\Components\\\\UserResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Button } from \"react-bulma-components\";\nimport ReactQuill from \"react-quill\";\nimport \"quill/dist/quill.snow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserResponse() {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const quillRef = useRef(null);\n  useEffect(() => {\n    console.log(value);\n  }, [value]);\n  useEffect(() => {\n    const checkAdblockStatus = () => {\n      if (document.getElementById(\"xjrRuYBDKTIX\")) {\n        console.log(\"Blocking Ads: No\");\n      } else {\n        console.log(\"Blocking Ads: Yes\");\n      }\n    };\n\n    // Run the check immediately\n    checkAdblockStatus();\n\n    // Set up an interval to periodically check ad-block status\n    const intervalId = setInterval(() => {\n      checkAdblockStatus();\n    }, 5000); // Check every 5 seconds\n\n    // Clean up the interval on component unmount\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  const handleChange = (content, delta, source, editor) => {\n    const text = editor.getText().trim();\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\n    if (isReadOnly) {\n      if (currentWordCount <= 1000) {\n        setValue(content);\n        setWordCount(currentWordCount);\n        setIsReadOnly(false);\n      }\n    } else {\n      if (currentWordCount > 1000) {\n        setIsReadOnly(true);\n      }\n      setValue(content);\n      setWordCount(currentWordCount);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactQuill, {\n      ref: quillRef,\n      theme: \"snow\",\n      className: \"editor-container\",\n      value: value,\n      onChange: handleChange,\n      readOnly: isReadOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Word count: \", wordCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"submit-button mt-2\",\n      fullwidth: true,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(UserResponse, \"1AWTu5YQRvXC5Ggr01QyrVl+y3A=\");\n_c = UserResponse;\nexport default UserResponse;\nvar _c;\n$RefreshReg$(_c, \"UserResponse\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Button","ReactQuill","jsxDEV","_jsxDEV","UserResponse","_s","value","setValue","wordCount","setWordCount","isReadOnly","setIsReadOnly","quillRef","console","log","checkAdblockStatus","document","getElementById","intervalId","setInterval","clearInterval","handleChange","content","delta","source","editor","text","getText","trim","currentWordCount","length","split","children","ref","theme","className","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","fullwidth","_c","$RefreshReg$"],"sources":["C:/dev/repos/PlotPilot/client/src/Components/UserResponse.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button } from \"react-bulma-components\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"quill/dist/quill.snow.css\";\r\n\r\nfunction UserResponse() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [isReadOnly, setIsReadOnly] = useState(false);\r\n  const quillRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log(value);\r\n  }, [value]);\r\n  \r\n  useEffect(() => {\r\n    const checkAdblockStatus = () => {\r\n      if (document.getElementById(\"xjrRuYBDKTIX\")) {\r\n        console.log(\"Blocking Ads: No\");\r\n      } else {\r\n        console.log(\"Blocking Ads: Yes\");\r\n      }\r\n    };\r\n\r\n    // Run the check immediately\r\n    checkAdblockStatus();\r\n\r\n    // Set up an interval to periodically check ad-block status\r\n    const intervalId = setInterval(() => {\r\n      checkAdblockStatus();\r\n    }, 5000); // Check every 5 seconds\r\n\r\n    // Clean up the interval on component unmount\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n  \r\n  const handleChange = (content, delta, source, editor) => {\r\n    const text = editor.getText().trim();\r\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\r\n    if (isReadOnly) {\r\n      if (currentWordCount <= 1000) {\r\n        setValue(content);\r\n        setWordCount(currentWordCount);\r\n        setIsReadOnly(false);\r\n      }\r\n    } else {\r\n      if (currentWordCount > 1000) {\r\n        setIsReadOnly(true);\r\n      }\r\n      setValue(content);\r\n      setWordCount(currentWordCount);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ReactQuill\r\n        ref={quillRef}\r\n        theme=\"snow\"\r\n        className=\"editor-container\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        readOnly={isReadOnly}\r\n      />\r\n      <p>Word count: {wordCount}</p>\r\n      <Button className=\"submit-button mt-2\" fullwidth={true}>\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserResponse;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMc,QAAQ,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE7BF,SAAS,CAAC,MAAM;IACdgB,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;EACpB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEXT,SAAS,CAAC,MAAM;IACd,MAAMkB,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,IAAIC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,EAAE;QAC3CJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MACjC,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAClC;IACF,CAAC;;IAED;IACAC,kBAAkB,EAAE;;IAEpB;IACA,MAAMG,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCJ,kBAAkB,EAAE;IACtB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV;IACA,OAAO,MAAM;MACXK,aAAa,CAACF,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,YAAY,GAAGA,CAACC,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,KAAK;IACvD,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO,EAAE,CAACC,IAAI,EAAE;IACpC,MAAMC,gBAAgB,GAAGH,IAAI,CAACI,MAAM,GAAGJ,IAAI,CAACK,KAAK,CAAC,KAAK,CAAC,CAACD,MAAM,GAAG,CAAC;IACnE,IAAIpB,UAAU,EAAE;MACd,IAAImB,gBAAgB,IAAI,IAAI,EAAE;QAC5BtB,QAAQ,CAACe,OAAO,CAAC;QACjBb,YAAY,CAACoB,gBAAgB,CAAC;QAC9BlB,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC,MAAM;MACL,IAAIkB,gBAAgB,GAAG,IAAI,EAAE;QAC3BlB,aAAa,CAAC,IAAI,CAAC;MACrB;MACAJ,QAAQ,CAACe,OAAO,CAAC;MACjBb,YAAY,CAACoB,gBAAgB,CAAC;IAChC;EACF,CAAC;EAID,oBACE1B,OAAA;IAAA6B,QAAA,gBACE7B,OAAA,CAACF,UAAU;MACTgC,GAAG,EAAErB,QAAS;MACdsB,KAAK,EAAC,MAAM;MACZC,SAAS,EAAC,kBAAkB;MAC5B7B,KAAK,EAAEA,KAAM;MACb8B,QAAQ,EAAEf,YAAa;MACvBgB,QAAQ,EAAE3B;IAAW;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACrB,eACFtC,OAAA;MAAA6B,QAAA,GAAG,cAAY,EAACxB,SAAS;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC9BtC,OAAA,CAACH,MAAM;MAACmC,SAAS,EAAC,oBAAoB;MAACO,SAAS,EAAE,IAAK;MAAAV,QAAA,EAAC;IAExD;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV;AAACpC,EAAA,CArEQD,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAuErB,eAAeA,YAAY;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}