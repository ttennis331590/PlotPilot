{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\repos\\\\PlotPilot\\\\client\\\\src\\\\Components\\\\UserResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Button } from \"react-bulma-components\";\nimport ReactQuill from \"react-quill\";\nimport \"quill/dist/quill.snow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserResponse() {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const [adBlockEnabled, setAdBlockEnabled] = useState(false);\n  const quillRef = useRef(null);\n  useEffect(() => {\n    console.log(value);\n  }, [value]);\n  useEffect(() => {\n    const checkAdblockStatus = () => {\n      if (document.getElementById(\"xjrRuYBDKTIX\")) {\n        console.log(\"Blocking Ads: No\");\n        setIsReadOnly(false);\n        setAdBlockEnabled(false);\n      } else {\n        console.log(\"Blocking Ads: Yes\");\n        setIsReadOnly(true);\n        setAdBlockEnabled(true);\n      }\n    };\n\n    // Run the check immediately\n    checkAdblockStatus();\n\n    // Set up an interval to periodically check ad-block status\n    const intervalId = setInterval(() => {\n      checkAdblockStatus();\n    }, 5000); // Check every 5 seconds\n\n    // Clean up the interval on component unmount\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  const handleChange = (content, delta, source, editor) => {\n    const text = editor.getText().trim();\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\n    if (isReadOnly) {\n      if (currentWordCount <= 1000) {\n        setValue(content);\n        setWordCount(currentWordCount);\n        setIsReadOnly(false);\n      }\n    } else {\n      if (currentWordCount > 1000) {\n        setIsReadOnly(true);\n      }\n      setValue(content);\n      setWordCount(currentWordCount);\n    }\n  };\n  const handleBlur = () => {\n    if (adBlockEnabled) {\n      quillRef.current.getEditor().focus();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quill-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(ReactQuill, {\n        ref: quillRef,\n        theme: \"snow\",\n        className: `editor-container ${adBlockEnabled ? \"blurred\" : \"\"}`,\n        value: value,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        readOnly: isReadOnly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), adBlockEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"adblock-message\",\n        children: [\"Please disable your ad-blocker or \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          children: \"provide an OpenAI API key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"word-count\",\n      children: [\"Word count: \", wordCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"submit-button mt-2\",\n      fullwidth: true,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(UserResponse, \"jvZLdXlXEFKq06YmnoSGqtoPfLg=\");\n_c = UserResponse;\nexport default UserResponse;\nvar _c;\n$RefreshReg$(_c, \"UserResponse\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Button","ReactQuill","jsxDEV","_jsxDEV","UserResponse","_s","value","setValue","wordCount","setWordCount","isReadOnly","setIsReadOnly","adBlockEnabled","setAdBlockEnabled","quillRef","console","log","checkAdblockStatus","document","getElementById","intervalId","setInterval","clearInterval","handleChange","content","delta","source","editor","text","getText","trim","currentWordCount","length","split","handleBlur","current","getEditor","focus","children","className","ref","theme","onChange","onBlur","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","href","fullwidth","_c","$RefreshReg$"],"sources":["C:/dev/repos/PlotPilot/client/src/Components/UserResponse.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button } from \"react-bulma-components\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"quill/dist/quill.snow.css\";\r\n\r\nfunction UserResponse() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [isReadOnly, setIsReadOnly] = useState(false);\r\n  const [adBlockEnabled, setAdBlockEnabled] = useState(false);\r\n  const quillRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log(value);\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    const checkAdblockStatus = () => {\r\n      if (document.getElementById(\"xjrRuYBDKTIX\")) {\r\n        console.log(\"Blocking Ads: No\");\r\n        setIsReadOnly(false);\r\n        setAdBlockEnabled(false);\r\n      } else {\r\n        console.log(\"Blocking Ads: Yes\");\r\n        setIsReadOnly(true);\r\n        setAdBlockEnabled(true);\r\n      }\r\n    };\r\n\r\n    // Run the check immediately\r\n    checkAdblockStatus();\r\n\r\n    // Set up an interval to periodically check ad-block status\r\n    const intervalId = setInterval(() => {\r\n      checkAdblockStatus();\r\n    }, 5000); // Check every 5 seconds\r\n\r\n    // Clean up the interval on component unmount\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  const handleChange = (content, delta, source, editor) => {\r\n    const text = editor.getText().trim();\r\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\r\n    if (isReadOnly) {\r\n      if (currentWordCount <= 1000) {\r\n        setValue(content);\r\n        setWordCount(currentWordCount);\r\n        setIsReadOnly(false);\r\n      }\r\n    } else {\r\n      if (currentWordCount > 1000) {\r\n        setIsReadOnly(true);\r\n      }\r\n      setValue(content);\r\n      setWordCount(currentWordCount);\r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (adBlockEnabled) {\r\n      quillRef.current.getEditor().focus();\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"quill-wrapper\">\r\n      <ReactQuill\r\n        ref={quillRef}\r\n        theme=\"snow\"\r\n        className={`editor-container ${adBlockEnabled ? \"blurred\" : \"\"}`}\r\n        value={value}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        readOnly={isReadOnly}\r\n      />\r\n      {adBlockEnabled && (\r\n        <div className=\"adblock-message\">\r\n        Please disable your ad-blocker or <a href=\"/\">provide an OpenAI API key.</a>\r\n      </div>\r\n      \r\n      )}\r\n      </div>\r\n      <p className=\"word-count\">Word count: {wordCount}</p>\r\n      <Button className=\"submit-button mt-2\" fullwidth={true}>\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserResponse;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}