{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\repos\\\\PlotPilot\\\\client\\\\src\\\\Components\\\\SubmitPrompt.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Content } from \"react-bulma-components\";\nimport ReactQuill from \"react-quill\";\nimport \"quill/dist/quill.snow.css\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserResponse() {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [charCount, setCharCount] = useState(0);\n  const handleChange = (content, delta, source, editor) => {\n    const text = editor.getText().trim();\n    const currentCharCount = text.length;\n    if (currentCharCount > 500) {\n      const newText = text.slice(0, 500);\n      setValue(newText);\n      setCharCount(500);\n    } else {\n      setValue(content);\n      setCharCount(currentCharCount);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Content, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"is-size-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"A few guidelines:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Think outside the box! A prompt can be a paragraph or a single word - use your imagination!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quill-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(ReactQuill, {\n        theme: \"snow\",\n        className: \"editor-container\",\n        value: value,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"char-count\",\n      children: [\"Character count: \", charCount, \"/500\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"submit-button mt-2\",\n      fullwidth: true,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(UserResponse, \"BAR+NMCGAqoRimUs7qssiHPgxxA=\");\n_c = UserResponse;\nexport default UserResponse;\nvar _c;\n$RefreshReg$(_c, \"UserResponse\");","map":{"version":3,"names":["React","useState","Button","Content","ReactQuill","Link","jsxDEV","_jsxDEV","UserResponse","_s","value","setValue","charCount","setCharCount","handleChange","content","delta","source","editor","text","getText","trim","currentCharCount","length","newText","slice","children","className","fileName","_jsxFileName","lineNumber","columnNumber","theme","onChange","fullwidth","_c","$RefreshReg$"],"sources":["C:/dev/repos/PlotPilot/client/src/Components/SubmitPrompt.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Content } from \"react-bulma-components\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"quill/dist/quill.snow.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction UserResponse() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [charCount, setCharCount] = useState(0);\r\n\r\n  const handleChange = (content, delta, source, editor) => {\r\n    const text = editor.getText().trim();\r\n    const currentCharCount = text.length;\r\n\r\n    if (currentCharCount > 500) {\r\n      const newText = text.slice(0, 500);\r\n      setValue(newText);\r\n      setCharCount(500);\r\n    } else {\r\n      setValue(content);\r\n      setCharCount(currentCharCount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Content>\r\n        <p className=\"is-size-5\">\r\n          <strong>A few guidelines:</strong>\r\n          <ul>\r\n            <li>Think outside the box! A prompt can be a paragraph or a single word - use your imagination!</li>\r\n          </ul>\r\n        </p>\r\n      </Content>\r\n      <div className=\"quill-wrapper\">\r\n        <ReactQuill\r\n          theme=\"snow\"\r\n          className=\"editor-container\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <p className=\"char-count\">Character count: {charCount}/500</p>\r\n      <Button className=\"submit-button mt-2\" fullwidth={true}>\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserResponse;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,OAAO,QAAQ,wBAAwB;AACxD,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAO,2BAA2B;AAClC,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAMa,YAAY,GAAGA,CAACC,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,KAAK;IACvD,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO,EAAE,CAACC,IAAI,EAAE;IACpC,MAAMC,gBAAgB,GAAGH,IAAI,CAACI,MAAM;IAEpC,IAAID,gBAAgB,GAAG,GAAG,EAAE;MAC1B,MAAME,OAAO,GAAGL,IAAI,CAACM,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;MAClCd,QAAQ,CAACa,OAAO,CAAC;MACjBX,YAAY,CAAC,GAAG,CAAC;IACnB,CAAC,MAAM;MACLF,QAAQ,CAACI,OAAO,CAAC;MACjBF,YAAY,CAACS,gBAAgB,CAAC;IAChC;EACF,CAAC;EAED,oBACEf,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACJ,OAAO;MAAAuB,QAAA,eACNnB,OAAA;QAAGoB,SAAS,EAAC,WAAW;QAAAD,QAAA,gBACtBnB,OAAA;UAAAmB,QAAA,EAAQ;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAClCxB,OAAA;UAAAmB,QAAA,eACEnB,OAAA;YAAAmB,QAAA,EAAI;UAA2F;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAK;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACjG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACI,eACVxB,OAAA;MAAKoB,SAAS,EAAC,eAAe;MAAAD,QAAA,eAC5BnB,OAAA,CAACH,UAAU;QACT4B,KAAK,EAAC,MAAM;QACZL,SAAS,EAAC,kBAAkB;QAC5BjB,KAAK,EAAEA,KAAM;QACbuB,QAAQ,EAAEnB;MAAa;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACvB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACNxB,OAAA;MAAGoB,SAAS,EAAC,YAAY;MAAAD,QAAA,GAAC,mBAAiB,EAACd,SAAS,EAAC,MAAI;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eAC9DxB,OAAA,CAACL,MAAM;MAACyB,SAAS,EAAC,oBAAoB;MAACO,SAAS,EAAE,IAAK;MAAAR,QAAA,EAAC;IAExD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV;AAACtB,EAAA,CA1CQD,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AA4CrB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}