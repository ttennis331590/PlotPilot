{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\repos\\\\PlotPilot\\\\client\\\\src\\\\Components\\\\UserResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Button } from \"react-bulma-components\";\nimport ReactQuill from \"react-quill\";\nimport _ from \"lodash\";\nimport \"quill/dist/quill.snow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserResponse() {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const [noAdsPlease, setNoAdsPlease] = useState(false);\n  const quillRef = useRef(null);\n  useEffect(() => {\n    console.log(value);\n  }, [value]);\n  useEffect(() => {\n    // ... other useEffect code ...\n\n    // Initialize the `noAdsPlease` state based on the `window.noAdsPlease` property\n    if (window.noAdsPlease === undefined) {\n      setNoAdsPlease(false);\n      console.log(noAdsPlease);\n    } else {\n      setNoAdsPlease(window.noAdsPlease);\n      console.log(noAdsPlease);\n    }\n  }, []);\n  useEffect(() => {\n    if (!noAdsPlease) {\n      console.log(\"Adblock detected\");\n    }\n  }, [noAdsPlease]);\n  const handleChange = (content, delta, source, editor) => {\n    const text = editor.getText().trim();\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\n    if (isReadOnly) {\n      if (currentWordCount <= 1000) {\n        setValue(content);\n        setWordCount(currentWordCount);\n        setIsReadOnly(false);\n      }\n    } else {\n      if (currentWordCount > 1000) {\n        setIsReadOnly(true);\n      }\n      setValue(content);\n      setWordCount(currentWordCount);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactQuill, {\n      ref: quillRef,\n      theme: \"snow\",\n      className: \"editor-container\",\n      value: value,\n      onChange: handleChange,\n      readOnly: isReadOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Word count: \", wordCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"submit-button mt-2\",\n      fullwidth: true,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(UserResponse, \"HnaB3lc/n+u8BuoSp4pa4DvGO+Q=\");\n_c = UserResponse;\nexport default UserResponse;\nvar _c;\n$RefreshReg$(_c, \"UserResponse\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Button","ReactQuill","_","jsxDEV","_jsxDEV","UserResponse","_s","value","setValue","wordCount","setWordCount","isReadOnly","setIsReadOnly","noAdsPlease","setNoAdsPlease","quillRef","console","log","window","undefined","handleChange","content","delta","source","editor","text","getText","trim","currentWordCount","length","split","children","ref","theme","className","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","fullwidth","_c","$RefreshReg$"],"sources":["C:/dev/repos/PlotPilot/client/src/Components/UserResponse.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button } from \"react-bulma-components\";\r\nimport ReactQuill from \"react-quill\";\r\nimport _ from \"lodash\";\r\nimport \"quill/dist/quill.snow.css\";\r\n\r\nfunction UserResponse() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [isReadOnly, setIsReadOnly] = useState(false);\r\n  const [noAdsPlease, setNoAdsPlease] = useState(false);\r\n  const quillRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log(value);\r\n  }, [value]);\r\n  \r\n  useEffect(() => {\r\n    // ... other useEffect code ...\r\n\r\n    // Initialize the `noAdsPlease` state based on the `window.noAdsPlease` property\r\n    if (window.noAdsPlease === undefined) {\r\n      setNoAdsPlease(false);\r\n      console.log(noAdsPlease);\r\n    } else {\r\n      setNoAdsPlease(window.noAdsPlease);\r\n      console.log(noAdsPlease);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!noAdsPlease) {\r\n      console.log(\"Adblock detected\");\r\n    }\r\n  }, [noAdsPlease]);\r\n\r\n  const handleChange = (content, delta, source, editor) => {\r\n    const text = editor.getText().trim();\r\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\r\n    if (isReadOnly) {\r\n      if (currentWordCount <= 1000) {\r\n        setValue(content);\r\n        setWordCount(currentWordCount);\r\n        setIsReadOnly(false);\r\n      }\r\n    } else {\r\n      if (currentWordCount > 1000) {\r\n        setIsReadOnly(true);\r\n      }\r\n      setValue(content);\r\n      setWordCount(currentWordCount);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ReactQuill\r\n        ref={quillRef}\r\n        theme=\"snow\"\r\n        className=\"editor-container\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        readOnly={isReadOnly}\r\n      />\r\n      <p>Word count: {wordCount}</p>\r\n      <Button className=\"submit-button mt-2\" fullwidth={true}>\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserResponse;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}