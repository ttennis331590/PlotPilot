{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\repos\\\\PlotPilot\\\\client\\\\src\\\\Components\\\\UserResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Button } from \"react-bulma-components\";\nimport ReactQuill from \"react-quill\";\nimport _ from \"lodash\";\nimport \"quill/dist/quill.snow.css\";\nimport blockAdBlock from 'blockadblock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserResponse() {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const quillRef = useRef(null);\n\n  // Function called if AdBlock is not detected\n  function adBlockNotDetected() {\n    alert('AdBlock is not enabled');\n  }\n  // Function called if AdBlock is detected\n  function adBlockDetected() {\n    alert('AdBlock is enabled');\n  }\n\n  // Recommended audit because AdBlock lock the file 'blockadblock.js' \n  // If the file is not called, the variable does not exist 'blockAdBlock'\n  // This means that AdBlock is present\n  if (typeof blockAdBlock === 'undefined') {\n    adBlockDetected();\n  } else {\n    blockAdBlock.onDetected(adBlockDetected);\n    blockAdBlock.onNotDetected(adBlockNotDetected);\n    // and|or\n    blockAdBlock.on(true, adBlockDetected);\n    blockAdBlock.on(false, adBlockNotDetected);\n    // and|or\n    blockAdBlock.on(true, adBlockDetected).onNotDetected(adBlockNotDetected);\n  }\n\n  // Change the options\n  blockAdBlock.setOption('checkOnLoad', false);\n  // and|or\n  blockAdBlock.setOption({\n    debug: true,\n    checkOnLoad: false,\n    resetOnEnd: false\n  });\n  useEffect(() => {\n    console.log(value);\n  }, [value]);\n  const handleChange = (content, delta, source, editor) => {\n    const text = editor.getText().trim();\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\n    if (isReadOnly) {\n      if (currentWordCount <= 1000) {\n        setValue(content);\n        setWordCount(currentWordCount);\n        setIsReadOnly(false);\n      }\n    } else {\n      if (currentWordCount > 1000) {\n        setIsReadOnly(true);\n      }\n      setValue(content);\n      setWordCount(currentWordCount);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactQuill, {\n      ref: quillRef,\n      theme: \"snow\",\n      className: \"editor-container\",\n      value: value,\n      onChange: handleChange,\n      readOnly: isReadOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Word count: \", wordCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"submit-button mt-2\",\n      fullwidth: true,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(UserResponse, \"JWMjRfw8doWzmed4zdYaTs5ejVg=\");\n_c = UserResponse;\nexport default UserResponse;\nvar _c;\n$RefreshReg$(_c, \"UserResponse\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Button","ReactQuill","_","blockAdBlock","jsxDEV","_jsxDEV","UserResponse","_s","value","setValue","wordCount","setWordCount","isReadOnly","setIsReadOnly","quillRef","adBlockNotDetected","alert","adBlockDetected","onDetected","onNotDetected","on","setOption","debug","checkOnLoad","resetOnEnd","console","log","handleChange","content","delta","source","editor","text","getText","trim","currentWordCount","length","split","children","ref","theme","className","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","fullwidth","_c","$RefreshReg$"],"sources":["C:/dev/repos/PlotPilot/client/src/Components/UserResponse.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button } from \"react-bulma-components\";\r\nimport ReactQuill from \"react-quill\";\r\nimport _ from \"lodash\";\r\nimport \"quill/dist/quill.snow.css\";\r\nimport blockAdBlock from 'blockadblock';\r\n\r\nfunction UserResponse() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [isReadOnly, setIsReadOnly] = useState(false);\r\n  const quillRef = useRef(null);\r\n\r\n\r\n  // Function called if AdBlock is not detected\r\nfunction adBlockNotDetected() {\r\n\talert('AdBlock is not enabled');\r\n}\r\n// Function called if AdBlock is detected\r\nfunction adBlockDetected() {\r\n\talert('AdBlock is enabled');\r\n}\r\n\r\n// Recommended audit because AdBlock lock the file 'blockadblock.js' \r\n// If the file is not called, the variable does not exist 'blockAdBlock'\r\n// This means that AdBlock is present\r\nif(typeof blockAdBlock === 'undefined') {\r\n\tadBlockDetected();\r\n} else {\r\n\tblockAdBlock.onDetected(adBlockDetected);\r\n\tblockAdBlock.onNotDetected(adBlockNotDetected);\r\n\t// and|or\r\n\tblockAdBlock.on(true, adBlockDetected);\r\n\tblockAdBlock.on(false, adBlockNotDetected);\r\n\t// and|or\r\n\tblockAdBlock.on(true, adBlockDetected).onNotDetected(adBlockNotDetected);\r\n}\r\n\r\n// Change the options\r\nblockAdBlock.setOption('checkOnLoad', false);\r\n// and|or\r\nblockAdBlock.setOption({\r\n\tdebug: true,\r\n\tcheckOnLoad: false,\r\n\tresetOnEnd: false\r\n});\r\n  useEffect(() => {\r\n    console.log(value);\r\n  }, [value]);\r\n\r\n  const handleChange = (content, delta, source, editor) => {\r\n    const text = editor.getText().trim();\r\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\r\n    if (isReadOnly) {\r\n      if (currentWordCount <= 1000) {\r\n        setValue(content);\r\n        setWordCount(currentWordCount);\r\n        setIsReadOnly(false);\r\n      }\r\n    } else {\r\n      if (currentWordCount > 1000) {\r\n        setIsReadOnly(true);\r\n      }\r\n      setValue(content);\r\n      setWordCount(currentWordCount);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <ReactQuill\r\n        ref={quillRef}\r\n        theme=\"snow\"\r\n        className=\"editor-container\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        readOnly={isReadOnly}\r\n      />\r\n      <p>Word count: {wordCount}</p>\r\n      <Button className=\"submit-button mt-2\" fullwidth={true}>\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserResponse;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}