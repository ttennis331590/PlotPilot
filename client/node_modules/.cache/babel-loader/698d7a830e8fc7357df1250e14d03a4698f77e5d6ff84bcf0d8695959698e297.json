{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\repos\\\\PlotPilot\\\\client\\\\src\\\\Components\\\\UserResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Button } from \"react-bulma-components\";\nimport ReactQuill from \"react-quill\";\nimport \"quill/dist/quill.snow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserResponse() {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const quillRef = useRef(null);\n  useEffect(() => {\n    console.log(value);\n    if (quillRef && quillRef.current) {\n      const quillInstance = quillRef.current.getEditor();\n      quillInstance.root.addEventListener(\"paste\", handlePaste);\n    }\n    return () => {\n      if (quillRef && quillRef.current) {\n        const quillInstance = quillRef.current.getEditor();\n        quillInstance.root.removeEventListener(\"paste\", handlePaste);\n      }\n    };\n  }, [value]);\n  const handleChange = (content, delta, source, editor) => {\n    const text = editor.getText().trim();\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\n    if (currentWordCount <= 1000) {\n      setValue(content);\n      setWordCount(currentWordCount);\n    } else {\n      editor.blur();\n    }\n  };\n  const handlePaste = event => {\n    event.preventDefault();\n    const text = (event.clipboardData || window.clipboardData).getData(\"text\");\n    const words = text.trim().split(/\\s+/);\n    const quillInstance = quillRef.current.getEditor();\n    const selection = quillInstance.getSelection();\n    if (words.length + wordCount <= 1000 && selection) {\n      const {\n        index\n      } = selection;\n      quillInstance.insertText(index, text);\n      quillInstance.setSelection(index + text.length);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactQuill, {\n      ref: quillRef,\n      theme: \"snow\",\n      className: \"editor-container\",\n      value: value,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Word count: \", wordCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"submit-button mt-2\",\n      fullwidth: true,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(UserResponse, \"IFxTp7oi76guCYclQKJA8EN6h24=\");\n_c = UserResponse;\nexport default UserResponse;\nvar _c;\n$RefreshReg$(_c, \"UserResponse\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Button","ReactQuill","jsxDEV","_jsxDEV","UserResponse","_s","value","setValue","wordCount","setWordCount","quillRef","console","log","current","quillInstance","getEditor","root","addEventListener","handlePaste","removeEventListener","handleChange","content","delta","source","editor","text","getText","trim","currentWordCount","length","split","blur","event","preventDefault","clipboardData","window","getData","words","selection","getSelection","index","insertText","setSelection","children","ref","theme","className","onChange","fileName","_jsxFileName","lineNumber","columnNumber","fullwidth","_c","$RefreshReg$"],"sources":["C:/dev/repos/PlotPilot/client/src/Components/UserResponse.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button } from \"react-bulma-components\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"quill/dist/quill.snow.css\";\r\n\r\nfunction UserResponse() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const quillRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log(value);\r\n    if (quillRef && quillRef.current) {\r\n      const quillInstance = quillRef.current.getEditor();\r\n      quillInstance.root.addEventListener(\"paste\", handlePaste);\r\n    }\r\n    return () => {\r\n      if (quillRef && quillRef.current) {\r\n        const quillInstance = quillRef.current.getEditor();\r\n        quillInstance.root.removeEventListener(\"paste\", handlePaste);\r\n      }\r\n    };\r\n  }, [value]);\r\n\r\n  const handleChange = (content, delta, source, editor) => {\r\n    const text = editor.getText().trim();\r\n    const currentWordCount = text.length ? text.split(/\\s+/).length : 0;\r\n\r\n    if (currentWordCount <= 1000) {\r\n      setValue(content);\r\n      setWordCount(currentWordCount);\r\n    } else {\r\n      editor.blur();\r\n    }\r\n  };\r\n\r\n  const handlePaste = (event) => {\r\n    event.preventDefault();\r\n    const text = (event.clipboardData || window.clipboardData).getData(\"text\");\r\n    const words = text.trim().split(/\\s+/);\r\n    const quillInstance = quillRef.current.getEditor();\r\n    const selection = quillInstance.getSelection();\r\n  \r\n    if (words.length + wordCount <= 1000 && selection) {\r\n      const { index } = selection;\r\n      quillInstance.insertText(index, text);\r\n      quillInstance.setSelection(index + text.length);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <ReactQuill\r\n        ref={quillRef}\r\n        theme=\"snow\"\r\n        className=\"editor-container\"\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n      <p>Word count: {wordCount}</p>\r\n      <Button className=\"submit-button mt-2\" fullwidth={true}>\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserResponse;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}